#ifndef NEWS_PROCESS_NEWS_PROCESS_H
#define NEWS_PROCESSS_NEWS_PROCESS_H
#include"global.h"
#include<iostream>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<fstream>
#include<sstream>
#include<ctime>
#include<cstdlib>
#include"pcrecpp.h"


namespace news_process{

using std::string;
using std::vector;
using std::map;
using std::multimap;
using std::ofstream;
using std::ifstream;
using std::set;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::pair;
using std::make_pair;
using std::istream;

//divided 24 hours into five sections
enum PdateSection{kSection0, kSection1, kSection2, kSection3, kSection4, kSectionNums};

//page's attribute
//比较网页的重要度时，先比较hot_rank，如果相同再比较site_rank ，如果site_rank相同，则比较newsrank
//至于 site_factor,主要用于对文章发表数量加权，比如对一篇文章进行时间加权后，假设权值为4，如果
// site_factor = 5 ，则经过最终加权，我们认为与这篇文章相同的文章一共发表了4*5=20次
struct PageInfo
{     
        //记录此网页在page_array_数组中的位置，过滤重复关键词时会用到
        unsigned long int pos_in_array;          
        string url;   
        string site;  
        string kws;

        //publish date                        
        time_t pdate;

        time_t crawltime;     
        PdateSection section;        //section's rely on 'pdate'    
        int section_weighted_nums;    //hour_weighted_page_nums[section] = section_weighted_nums    
        string tag;                   //e.g. domestic, social , fun    
        double site_factor;
        int newsrank;         
        int site_rank;                // 0 or 1  
        double hot_rank;              //reflect page's final importance
        string title;                    

        //parse title to keywords    
        string keywords[global::kMaxKeywordsNums]; 


        PageInfo(string key="")
        {
                for(int i = 0; i < global::kMaxKeywordsNums; i++)
                {
                        keywords[i] = key;
                }
        }

};

struct KeywordInfo
{
        int section_nums[kSectionNums];
        vector<unsigned long int> *pos_in_page_array;  // if the page has this key , record the pages pos in page_array_  
        double key_avg_nums;                
        double key_value; 

        int section_nums_original[kSectionNums];       //在debug模式中使用，程序实际运行时无意义
        double key_nums_original;                      //debug 模式使用，关键词一共出现的次数

        KeywordInfo(int num = 0)
        {
                for(int i = 0; i < kSectionNums; i++)
                {
                        section_nums[i] = num;
                }
                for(int i = 0; i < kSectionNums; i++)
                {
                        section_nums_original[i] = num;
                }

        }

};


class NewsProcess
{
        private:

                string file_name_;                      //程序处理的文件名
                string classification_name_;                     //处理的文件所属的类型（比如 economy，fun，social等）
                time_t file_generated_time_;            //文件的生成时间
                string file_generated_time_str_;
                string outfile_name_;                   //结果文件的文件名
                string hotrank_filename_;
                vector<string> filted_chars_in_title_;
                vector<int> hour_weighted_page_nums_;  

                vector<struct PageInfo* >  page_array_;

                map<string, struct KeywordInfo*> key_map_;

                multimap<string, struct PageInfo*> kws_site_multimap_; //同一篇文章(kws相同则认为是同一篇文章)在一个site下只计算一次	

                set<string> safe_sites_; 
                set<string> black_sites_;
                set<string> black_keywords_;

                vector<string> sites_highlighted_;  //sites which wanted to be highlighting
                vector<string> sites_official_;  //the official news
                vector<string> sites_meta_;      //传媒site

                map<string, double> hot_sites_it_;
                map<string, double> hot_sites_science_;
                map<string, double> hot_sites_car_;
                map<string, double> hot_sites_economy_;
                map<string, double> hot_sites_militery_;
                map<string, double> hot_sites_women_;

                map<string, double> hot_words_it_;
                map<string, double> hot_words_science_;

                ofstream outfile_handle_;
                ofstream meta_handle_;
                ofstream hotrank_handle_;
                ofstream newshot_handle_;

                int Init(const string& file_name);
                int ReadConfig(const string& config_filename, vector<string>& vec_name);
                int ReadConfig(const string& config_filename, set<string>& set_name); 
                int ReadConfig(const string& config_filename, map<string, double>& map_name); 
                void InitHourWeightedPageNums();
                int UpdateKwsSiteMultimap(struct PageInfo* p_page_info);
                int StatisticSection(const time_t& referenced_time, struct PageInfo* p_page_info);
                int StatisticsALLKeywordsDetails();
                void CalculateKeyWeight();
                bool IsFiltedPage(const time_t &referenced_time,const struct PageInfo* p_page_info);
                int CalculatePageWeight();
                void DestoryMemory();
                int ParsePage(const string& line, struct PageInfo *p_page_info);
                int InitSiteRank(struct PageInfo* p_page_info);
                int InitSiteFactor(struct PageInfo* p_page_info);
                int ExtractKeywords(const string &key_join, struct PageInfo* p_temp_page);
                void OutputTopnNews(const int& top_n);
                bool IsReachTheThreshold(map<string, int>&sites_count,const string &site, const int &threshold);
                int RecordPageWithSameKeywords(set<int>& exsited_key_pos, const struct PageInfo* p_page_info);
                int OutputResult(const struct PageInfo* p_page_info);
                void PrintKeyStruct(map<string,struct KeywordInfo*>& key_map,int key_top_n);
                int  OutputMetaSites(ofstream& out_handle, struct PageInfo* p_page_info);
                int MakeDir(const string& dir_name);
                int OpenOutfileHandle();
        public:
                int Start(string file_name);
                ~NewsProcess();

};
} // namespace news_process
#endif
